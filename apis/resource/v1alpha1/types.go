/*
Copyright 2017 The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package v1alpha1

import (
	"net"

	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// +genclient
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object

// MachineInfo is a specification for a MachineInfo resource
type MachineInfo struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`

	Spec MachineInfoSpec `json:"spec"`
}

// MachineInfoSpec implement by node exporter
type MachineInfoSpec struct {
	MachineInfo *CadvisorMachineInfo `json:"machineInfo"`

	// actually, CPUTopology can be generated by info.MachineInfo,
	// but we still keep it since it construct topology info in a
	// more convenient way
	CPUTopology *CPUTopology `json:"CPUTopology"`

	MemoryTopology *MemoryTopology `json:"memoryTopology"`

	// ExtraCPUInfo is extra cpu info not in MachineInfo, such as
	// supported instructions
	ExtraCPUInfo *ExtraCPUInfo `json:"extraCPUInfo"`

	// ExtraNetworkInfo is extra network info not in MachineInfo,
	// such as numa node of each interface
	ExtraNetworkInfo *ExtraNetworkInfo `json:"extraNetworkInfo"`

	// ExtraTopologyInfo is extra topology info not in MachineInfo,
	// such as numa node distance between each other
	ExtraTopologyInfo *ExtraTopologyInfo `json:"extraTopologyInfo"`
}

// CPUTopology contains details of node cpu, where :
// CPU  - logical CPU, cadvisor - thread
// Core - physical CPU, cadvisor - Core
// Socket - socket, cadvisor - Socket
// NUMA Node - NUMA cell, cadvisor - Node
type CPUTopology struct {
	NumCPUs              int            `json:"numCPUs"`
	NumCores             int            `json:"numCores"`
	NumSockets           int            `json:"numSockets"`
	NumNUMANodes         int            `json:"numNUMANodes"`
	NUMANodeIDToSocketID map[string]int `json:"numaNodeIDToSocketID"`
	CPUDetails           CPUDetails     `json:"cpuDetails"`
}

type CPUDetails map[string]CPUInfo

// CPUInfo contains the NUMA, socket, and core IDs associated with a CPU.
type CPUInfo struct {
	NUMANodeID int `json:"numaNodeID"`
	SocketID   int `json:"socketID"`
	CoreID     int `json:"coreID"`
}

type MemoryTopology struct {
	MemoryDetails MemoryDetails `json:"memoryDetails"`
}

type MemoryDetails map[string]uint64

type ExtraCPUInfo struct {
	// SupportInstructionSet instructions all cpus support.
	SupportInstructionSet String `json:"supportInstructionSet"`
}

// sets.String is a set of strings, implemented via map[string]struct{} for minimal memory consumption.
type String map[string]Empty

// Empty is public since it is used by some internal API objects for conversions between external
// string arrays and internal sets, and conversion logic requires public types today.
type Empty struct{}

type ExtraNetworkInfo struct {
	// Interface info list of all network interface.
	Interface []InterfaceInfo `json:"interface"`
}

type InterfaceInfo struct {
	// Iface name of this interface.
	Iface string `json:"iface"`
	// Speed of this interface.
	Speed int `json:"speed"`
	// NumaNode numa node of this interface belongs to.
	NumaNode int `json:"numaNode"`
	// Enable whether enable this interface.
	Enable bool `json:"enable"`
	// Addr address of this interface, which includes ipv4 and ipv6.
	Addr *IfaceAddr `json:"addr"`

	// NSName indicates the namespace for this  interface
	NSName string `json:"nsName"`
	// NSAbsolutePath indicates the namespace path for this interface
	NSAbsolutePath string `json:"nsAbsolutePath"`
}

type IfaceAddr struct {
	IPV4 []*net.IP `json:"ipV4"`
	IPV6 []*net.IP `json:"ipV6"`
}

type NumaDistanceInfo struct {
	NumaID   int `json:"numaID"`
	Distance int `json:"distance"`
}

type ExtraTopologyInfo struct {
	NumaDistanceMap  map[string][]NumaDistanceInfo `json:"numaDistanceMap"`
	*SiblingNumaInfo `json:"siblingNumaInfo"`
}

type Int map[string]Empty

type SiblingNumaInfo struct {
	SiblingNumaMap map[string]Int `json:"siblingNumaMap"`

	// SiblingNumaAvgMBWAllocatableMap maps NUMA IDs to the allocatable memory bandwidth,
	// averaged across each NUMA node and its siblings.
	// SiblingNumaAvgMBWCapacityMap maps NUMA IDs to the capacity memory bandwidth,
	// averaged similarly.
	SiblingNumaAvgMBWAllocatableMap map[string]int64 `json:"siblingNumaAvgMBWAllocatableMap"`
	SiblingNumaAvgMBWCapacityMap    map[string]int64 `json:"siblingNumaAvgMBWCapacityMap"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object

// MachineInfoList is a list of MachineInfo resources
type MachineInfoList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata"`

	Items []MachineInfo `json:"items"`
}
